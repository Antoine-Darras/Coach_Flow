import google.generativeai as genai
import os
import streamlit as st
import pandas as pd

df = pd.read_parquet("data/processed/activities.parquet")


genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
model = genai.GenerativeModel("gemini-2.0-flash")

summary = [
    f"""Voici un r√©sum√© de mes 15 derni√®res s√©ances :
- Types d'activit√©s : {', '.join(df['type'].unique())}
- Distances (km) : {df['distance_km'].head(15).tolist()}
- Allures (min/km) : {df['pace_min_per_km'].round(2).head(15).tolist()}
- Durees (hh:mm:ss) : {df['duration_hhmmss'].head(15).tolist()}
- Fr√©quence cardiaque moyenne (bpm) : {df['avg_heart_rate'].head(15).tolist()}
- Calories brul√©es (kcal) : {df['calories_burned'].head(15).tolist()}
"""
]


def submit():
    user_input = st.session_state.user_prompt
    if user_input:
        # Ici tu appelles ton chatbot
        response = st.session_state.chat.send_message(user_input)
        st.session_state.history.append(("User", user_input))
        st.session_state.history.append(("CoachFlow", response.text))
        st.session_state.user_prompt = ""


if "chat" not in st.session_state:

    st.session_state.chat = model.start_chat(
        history=[
            {
                "role": "user",
                "parts": [
                    "Tu es un coach sportif expert en course √† pied et trail. Mais tu as une connaissance du triathlon. "
                    "Tu peux conseiller sur tout ce qui concerne le triathlon, y compris la nutrition, l'entra√Ænement, les exercices de renforcement, etc."
                    " Donne des r√©ponses claires, concr√®tes, bienveillantes et personnalis√©es, pr√©cises mais aussi courtes."
                    "Tu te bases sur les donn√©es des 15 derni√®res activit√©s pour recommander la meilleure activit√© possible."
                    "Prends bien en compte la fr√©quence cardiaque moyenne par rapport √† l'allure pour d√©termine le niveau du coureur"
                ],
            },
            {"role": "user", "parts": summary},
        ]
    )

if "history" not in st.session_state:
    st.session_state.history = []

st.markdown(
    """
    <h1 style='text-align: center; color: teal;'>
        CoachFlow üèä üö¥ üèÉ 
    </h1>
    """,
    unsafe_allow_html=True,
)
st.write("---")
st.title("üí¨ CoachFlow - Ton coach IA personnalis√©")
st.write(
    "Je te pr√©sente ton coach, ci-dessous il t'aidera √† r√©pondre √† tes questions, te proposer des activit√©s et te donner des conseils !"
)

if df is None:
    st.write("Aucune donn√©es disponibles.")
else:
    st.write("Pr√™t pour le coaching !")

st.write("---")
st.write("Comment √ßa fonctionne ?")
st.write(
    "Donne ton ou tes objectifs du moment √† ton coach, il regardera tes derni√®res activit√©s et te donnera des conseils personnalis√©s !"
)
st.write(
    "Tu peux m√™me lui demander des conseils pour la nutrition en course ou tout ce que tu veux en rapport avec le sport !"
)
st.write("---")

user_input = st.text_input(
    "Pose une question √† ton coach (ex : Quel type de s√©ance demain ?)",
    key="user_prompt",
    on_change=submit,
)
if user_input:
    response = st.session_state.chat.send_message(user_input)
    st.session_state.history.append(("User", user_input))
    st.session_state.history.append(("CoachFlow", response.text))


for sender, message in st.session_state.history:
    if sender == "User":
        st.markdown(f"**Toi :** {message}")
    else:
        st.markdown(f"**CoachFlow :** {message}")
